# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers-plus docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers-plus docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-26 14:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/v1/feathers-hooks-common/guide.rst:2
msgid "feathers hooks common guide"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:5
msgid "Making Hook Params Dynamic"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:7
msgid "You will usually use static parameters for your hooks, e.g. \\ ``disallow('rest')``. However you will periodically need the parameters to vary depending on then current circumstances."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:11
msgid "This code will **not work** as hoped, as ``disallowWhat`` is evaluated when the module is required, not at each service call."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:24
msgid "This code will also **not do**, as most parameters do not permit functions, and ``disallowWhat`` will not be called for each service call."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:38
msgid "You are able to call ``disallowWhat`` for each service call as follows."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:50
msgid "``disallowWhat`` is called each time the hook is run. ``disallow(disallowWhat())`` creates a new hook with the value returned by ``disallowWhat()``, and then that hook is invoked with ``(context)``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:54
msgid "Let’s look at another example. The ``user`` record identifies information the user permits to be public, in its ``public`` field. We can write a hook retaining only the fields allowed to be exposed."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:65
msgid "fastJoin"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:67
msgid "We often want to combine rows from two or more tables based on a relationship between them. The ``fastJoin`` hook will select records that have matching values in both tables. It can batch service calls and cache records, thereby needing roughly an order of magnitude fewer database calls than the ``populate`` hook, i.e. \\ *2* calls instead of *20*. It uses a `GraphQL <http://graphql.org/>`__-like imperative API."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:74
msgid "``fastJoin`` is not restricted to using data from Feathers services. Resources for which there are no Feathers adapters can `also be used </v1/batch-loader/common-patterns.html#Using-non-Feathers-services>`__."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:79
msgid "Usage"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:110
msgid "The ``fastJoin(resolvers, query)`` API, like GraphQL, uses resolvers to provide a mapping between a portion of a operation and actual backend code responsible for handling it."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:114
msgid "It also takes an optional query with which you can customise the current operation. For example, the returned information may have to differ depending on the needs of the client making the service call."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:122
msgid "The services in all these examples are assumed, for simplicity, to have pagination disabled. You will have to decode when to use ``paginate: false`` in your code."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:131
msgid "Resolvers"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:154
msgid "The above example has two resolvers. Let’s focus on ``author``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:157
#: ../../source/v1/feathers-hooks-common/guide.rst:482
msgid "Code fragment"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:157
#: ../../source/v1/feathers-hooks-common/guide.rst:482
msgid "Description"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:159
msgid "``joins: {}``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:159
msgid "Describes what operations to perform on each record stored in the hook."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:163
msgid "``author:``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:163
msgid "Every operation has a property name. You use these names in the optional query to control which resolvers are run."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:168
msgid "``(...args) =>``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:168
msgid "You can pass parameters in the query to the resolvers."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:171
msgid "``async post => {...}``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:171
msgid "The record to be operated on is passed to the resolver func. The resolver function modifies it."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:175
msgid "``=> post.author =`` ``await users.find(`` ``id: post.userId)``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:175
msgid "A field is added containing the associated ``users`` record."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:179
msgid "``[0]``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:179
msgid "Extract the single user record from the array returned by ``users.find()``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:183
msgid "``fastJoin(postResolvers)``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:183
msgid "When no query is provided, all resolvers are run with undefined params."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:188
msgid "The result would look like:"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:205
msgid "Shaping the Result"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:217
msgid "The above query requests the author resolver be run, but not the starers resolver. This is a GraphQL concept which *shapes* the result. The result will not contain the ``starers`` field which the starers resolver would have otherwise added."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:222
msgid "All resolvers are run if query is not provided."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:235
msgid "Customize Resolver Operation"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:259
msgid "Parameters may be passed to the resolver functions. The ``starers`` field will contain both the ``id`` and ``name`` from the user record, rather than the default of only ``name``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:263
msgid "The ``context => query`` syntax shows the query can be dynamically modified based on information provided by the client."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:266
msgid "The ``paginate:false`` suppress pagination for this call, ensuring all the matching records are returned."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:269
msgid "Being able to create dynamic queries is an important concept to remember."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:287
msgid "Calculated Fields"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:298
msgid "A resolver function can make any sort of modification to the passed record; it is not limited to making service calls. Resolvers can use resources for which there is `no Feathers adapter </v1/batch-loader/common-patterns.html#Using-non-Feathers-services>`__."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:303
msgid "Here, the starerCount resolver adds the field ``starerCount`` containing a count of the ``starIds``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:319
msgid "Recursive Operations"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:321
msgid "We have been operating on the passed record by adding data to it. We can also recursively operate of that added data. We have been using a convenience syntax for resolvers so far: ``js   // Convenience syntax   starers: () => record => ...   // Equivalent to   starers: {     resolver: () => record ==> ...   }``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:326
msgid "The syntax for recursive operations uses the syntax below, where the ``joins`` will operate on the data returned by the comments resolver in the same fashion the top-level ``joins`` operated on the original record. ``js   comments: {     resolver: () => records => ...,     joins: { ... }   }``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:332
msgid "The comments resolver below adds related comment records to the passed record. The resolver function returns those comments, and that is the data which we will recursively operate on."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:336
msgid "The resolver function must return the data that is to be recursively operated on. Forgetting to do this is a common mistake."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:398
msgid "Keeping Resolvers DRY"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:400
msgid "The comments records contain a ``userId`` field which we use to associate the user record. Comment records themselves may be associated with posts records, with other comment records, etc."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:404
msgid "We don’t want to have to include the resolver for the user record every time we include the comment record someplace. We can keep our resolvers `DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`__ by defining resolvers for each base table separately and then referring to those resolvers when we need them."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:437
msgid "The comments resolver no longer has its own resolvers defined inline within its ``joins:``. A reference is made to the comments resolver definition."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:442
msgid "Batch-loaders"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:444
msgid "We have been looking till now into the structure and flexibility of ``fastJoin``. What we have done at so far makes as many database calls as the ``populate`` hook."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:448
msgid "We will use batch-loaders to dramatically reduce the number of database calls needed. Its not uncommon for operations that would have required *20* database calls to make only *2* using batch-loaders."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:452
msgid "You need to understand batch-loaders before we proceed, so `read about them now. <../batch-loader/guide.html>`__"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:456
msgid "Using a Simple Batch-Loader"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:479
msgid "Let’s look at the code in this example:"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:484
msgid "``before:``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:484
msgid "This function is executed before the operations start. Only the top-most ``before`` is run; any in recursive ``joins`` are ignored."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:490
msgid "``context._loaders``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:490
msgid "An empty object is initialized by ``fastJoin``. This is implemented as a stack, any value existing before ``fastJoin`` starts is stashed, and later restored as the hook terminates."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:497
msgid "``context._loaders.user.id``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:497
msgid "You can avoid confusion by organizing batch-loaders unambiguously. In this example ``user`` indicates the batch-loader returns single ``user`` records; the ``id`` indicates its keys will match ``user.id``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:506
msgid "``loaderFactory(users,`` ``'id', false, { paginate: false })``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:506
msgid "A convenience method for building straight forward batch-loaders. The batch loader reads record from the ``users`` service. The keys passed to it are ``id`` fields which it will match to ``user.id``. The ``false`` indicates the batch loader returns single records for each key rather than an array of records. ``params.pagination``\\ is set to ``false`` to disable pagination."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:520
msgid "``context._loaders`` ``.user.id.load()``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:520
msgid "Obtains data from the batch-loader for one key. Externally it acts like ``await users.find(...)``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:525
msgid "``context._loaders`` ``.user.id.loadMany()``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:525
msgid "This is how you obtain records for multiple keys from the data-loader."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:529
msgid "``!post.starIds ? null : ...``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:529
msgid "Handle ``posts.starIds`` which may not exist."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:552
msgid "The batch-loader made just *2* database calls. ``populate`` would have made *8*."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:556
msgid "Using Batch-Loaders"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:558
msgid "The ``loaderFactory(users, 'id', false)`` above is just a convenience wrapper for building a BatchLoader. We can create our batch loaders directly should we need them to do more."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:593
msgid "The `batch-loader guide <../batch-loader>`__ explains how to create batch-loaders."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:597
msgid "Putting It All Together"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:599
msgid "Let’s finish by putting together all we’ve seen in a comprehensive example."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:602
msgid "Let’s also add a ``reputation`` array of objects to ``posts``. This will show the increased flexibility of ``fastJoin``, as ``populate`` cannot handle such a structure directly."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:677
msgid "We are using 2 batch-loaders, one for single user records, the other for arrays of comment records."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:769
msgid "Each batch-loader made just one database call: - ``users.find({ query: { id: { $in: [ 101, 102, 103, 104] } } })`` - ``comments.find({ query: { postId: { $in: [ 1, 2, 3, 4 ] } } })``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:773
msgid "Only *2* database calls were needed to construct the result above. ``populate`` requires *22* calls."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:777
msgid "Using a Persistent Cache"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:779
msgid "Our BatchLoaders have been batching service calls together and keeping those results in a cache. This way those records don’t have to be read again."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:783
msgid "However each BatchLoader has been starting each request with an empty cache. So if 2 sequential ``fastJoin`` hook calls each need user id 101, they both need to **prime** their cache by each reading that record."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:787
msgid "We can improve the situation by using persistent caches with the BatchLoaders. A persistent cache stores records so future requests for those records can be served faster; the records stored in the cache are duplicates of records stored in the database."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:792
msgid "Let’s see how we can use the `cache hook <./index.html#cache>`__ as it maintains a persistent cache for the service its registered on."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:853
msgid "The ``cache`` hook **must** be registered in both ``before`` and ``after``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:856
msgid "The number of service calls needed to run the ``query`` above **the second time**:"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:860
msgid "Using"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:860
msgid "number of service calls"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:862
msgid "``populate``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:862
msgid "**22**"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:863
msgid "``fastJoin`` alone"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:863
msgid "**2**"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:864
msgid "``fastJoin`` and ``cache``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:864
msgid "**0**"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:867
msgid "The ``cache`` hook also makes ``get`` service calls more efficient."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:870
msgid "The GraphQL Feathers Adapter"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:872
msgid "By now you have an understanding of the foundations of Facebook’s `GraphQL <http://graphql.org/>`__. GraphQL however is more powerful and flexible."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:876
msgid "You may want to read about the Feathers service adapter [@feathers-plus/graphql](../graphql). **It supports SQL and non-SQL databases,** and automatically generates the resolver functions."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:893
msgid "Populate"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:896
msgid "``populate(options: Object): HookFunc`` `source <https://github.com/feathersjs/feathers-hooks-common/blob/master/src/services/populate.js>`__"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:898
msgid "Populates items *recursively* to any depth. Supports 1:1, 1:n and n:1 relationships."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:901
msgid "Used as a **before** or **after** hook on any service method."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:902
msgid "Supports multiple result items, including paginated ``find``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:903
msgid "Permissions control what a user may see."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:904
msgid "Provides performance profile information."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:905
msgid "Backward compatible with the old FeathersJS ``populate`` hook."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:908
msgid "Examples"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:910
msgid "1:1 relationship"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:937
msgid "1:n relationship"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:964
msgid "n:1 relationship"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:991
msgid "Multiple and recursive includes"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1033
msgid "Flexible relationship, similar to the n:1 relationship example above"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1060
msgid "Options"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1062
msgid "``schema`` (*required*, object or function) How to populate the items. `Details are below. <#schema>`__"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1065
msgid "Function signature ``(hook: Hook, options: Object): Object``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1066
#: ../../source/v1/feathers-hooks-common/guide.rst:1075
#: ../../source/v1/feathers-hooks-common/guide.rst:1162
msgid "``hook`` The hook."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1067
msgid "``options`` The ``options`` passed to the populate hook."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1069
msgid "``checkPermissions`` [optional, default () => true] Function to check if the user is allowed to perform this populate, or include this type of item. Called whenever a ``permissions`` property is found."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1073
msgid "Function signature ``(hook: Hook, service: string, permissions: any, depth: number): boolean``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1076
msgid "``service`` The name of the service being included, e.g. users, messages."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1078
msgid "``permissions`` The value of the permissions property."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1079
#: ../../source/v1/feathers-hooks-common/guide.rst:1164
msgid "``depth`` How deep the include is in the schema. Top of schema is 0."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1081
msgid "Return truesy to allow the include."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1083
msgid "``profile`` [optional, default false] If ``true``, the populated result is to contain a performance profile. Must be ``true``, truesy is insufficient."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1088
msgid "Schema"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1090
msgid "The data currently in the hook will be populated according to the schema. The schema starts with:"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1101
msgid "``service`` (*optional*) The name of the service this schema is to be used with. This can be used to prevent a schema designed to populate ‘blog’ items from being incorrectly used with ``comment`` items."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1104
msgid "``permissions`` (*optional*, any type of value) Who is allowed to perform this populate. See ``checkPermissions`` above."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1106
msgid "``include`` (*optional*) Which services to join to the data."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1109
msgid "Include"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1111
msgid "The ``include`` array has an element for each service to join. They each may have:"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1136
msgid "**ProTip** Instead of setting ``include`` to a 1-element array, you can set it to the include object itself, e.g. \\ ``include: { service: ..., nameAs: ..., ... }``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1140
msgid "``service`` [required, string] The name of the service providing the items."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1142
msgid "``nameAs`` [optional, string, default is service] Where to place the items from the join. Dot notation is allowed."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1144
msgid "``permissions`` [optional, any type of value] Who is allowed to perform this join. See ``checkPermissions`` above."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1146
msgid "``parentField`` [required if neither query nor select, string] The name of the field in the parent item for the `relation <#relation>`__. Dot notation is allowed."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1149
msgid "``childField`` [required if neither query nor select, string] The name of the field in the child item for the `relation <#relation>`__. Dot notation is allowed and will result in a query like ``{ 'name.first': 'John' }`` which is not suitable for all DBs. You may use ``query`` or ``select`` to create a query suitable for your DB."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1155
msgid "``query`` [optional, object] An object to inject into the query in ``service.find({ query: { ... } })``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1157
msgid "``select`` [optional, function] A function whose result is injected into the query."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1160
msgid "Function signature ``(hook: Hook, parentItem: Object, depth: number): Object``"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1163
msgid "``parentItem`` The parent item to which we are joining."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1167
msgid "``asArray`` [optional, boolean, default false] Force a single joined item to be stored as an array."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1169
msgid "``paginate`` {optional, boolean or number, default false] Controls pagination for this service."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1172
msgid "``false`` No pagination. The default."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1173
msgid "``true`` Use the configuration provided when the service was configured/"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1175
msgid "A number. The maximum number of items to include."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1177
msgid "``provider`` [optional] ``find`` calls are made to obtain the items to be joined. These, by default, are initialized to look like they were made by the same provider as that getting the base record. So when populating the result of a call made via ``socketio``, all the join calls will look like they were made via ``socketio``. Alternative you can set ``provider: undefined`` and the calls for that join will look like they were made by the server. The hooks on the service may behave differently in different situations."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1185
msgid "``useInnerPopulate`` [optional] Populate, when including records from a child service, ignores any populate hooks defined for that child service. The useInnerPopulate option will run those populate hooks. This allows the populate for a base record to include child records containing their own immediate child records, without the populate for the base record knowing what those grandchildren populates are."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1191
msgid "``include`` [optional] The new items may themselves include other items. The includes are recursive."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1194
msgid "Populate forms the query ``[childField]: parentItem[parentField]`` when the parent value is not an array. This will include all child items having that value."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1198
msgid "Populate forms the query ``[childField]: { $in: parentItem[parentField] }`` when the parent value is an array. This will include all child items having any of those values."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1203
msgid "A populate hook for, say, ``posts`` may include items from ``users``. Should the ``users`` hooks also include a populate, that ``users`` populate hook will not be run for includes arising from ``posts``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1207
msgid "**ProTip** The populate interface only allows you to directly manipulate ``hook.params.query``. You can manipulate the rest of ``hook.params`` by using the ```client`` <https://docs.feathersjs.com/v/auk/hooks/common/utils.html#client>`__ hook, along with something like ``query: { ..., $client: { paramsProp1: ..., paramsProp2: ... } }``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1215
msgid "Added properties"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1217
msgid "Some additional properties are added to populated items. The result may look like:"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1235
msgid "``_include`` The property names containing joined items."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1236
msgid "``_elapsed`` The elapsed time in nano-seconds (where 1,000,000 ns === 1 ms) taken to perform each include, as well as the total taken for them all. This delay is mostly attributed to your DB."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1239
msgid "``_computed`` The property names containing values computed by the ``serialize`` hook."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1242
msgid "The `depopulate <#depopulate>`__ hook uses these fields to remove all joined and computed values. This allows you to then ``service.patch()`` the item in the hook."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1247
msgid "Joining without using related fields"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1249
msgid "Populate can join child records to a parent record using the related columns ``parentField`` and ``childField``. However populate’s ``query`` and ``select`` options may be used to related the records without needing to use the related columns. This is a more flexible, non-SQL-like way of relating records. It easily supports dynamic, run-time schemas since the ``select`` option may be a function."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1257
msgid "Populate examples"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1260
msgid "Selecting schema based on UI needs"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1262
msgid "Consider a Purchase Order item. An Accounting oriented UI will likely want to populate the PO with Invoice items. A Receiving oriented UI will likely want to populate with Receiving Slips."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1266
msgid "Using a function for ``schema`` allows you to select an appropriate schema based on the need. The following example shows how the client can ask for the type of schema it needs."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1296
msgid "Using permissions"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1298
msgid "For a simplistic example, assume ``hook.params.users.permissions`` is an array of the service names the user may use, e.g. \\ ``['invoices', 'billings']``. These can be used to control which types of items the user can see."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1303
msgid "The following populate will only be performed for users whose ``user.permissions`` contains ``'invoices'``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1323
msgid "Validate"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1326
msgid "Example"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1328
msgid "Comprehensive validation may include the following:"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1330
msgid "Object schema validation. Checking the item object contains the expected properties with values in the expected format. The values might get sanitized. Knowing the item is well formed makes further validation simpler."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1334
msgid "Re-running any validation supposedly already done on the front-end. It would be an asset if the server can re-run the same code the front-end used."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1337
msgid "Performing any validation and sanitization unique to the server."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1339
msgid "A full featured example of such a process appears below. It validates and sanitizes a new user before adding the user to the database."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1342
msgid "The form expects to be notified of errors in the format ``{ email: 'Invalid email.', password: 'Password must be at least 8 characters.' }``."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1344
msgid "The form calls the server for async checking of selected fields when control leaves those fields. This for example could check that an email address is not already used by another user."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1347
msgid "The form does local sync validation when the form is submitted."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1348
msgid "The code performing the validations on the front-end is also used by the server."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1350
msgid "The server performs schema validation using Walmart’s `Joi <https://github.com/hapijs/joi>`__."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1352
msgid "The server does further validation and sanitization."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1355
msgid "Validation using Validate"
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1382
msgid "Validation routines for front and back-end."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1384
msgid "Validations used on front-end. They are re-run by the server."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1427
msgid "Schema definitions used by the server."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1450
msgid "Validations run by the server."
msgstr ""

#: ../../source/v1/feathers-hooks-common/guide.rst:1469
msgid "."
msgstr ""

